// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  name         String   @db.VarChar(100)
  email        String   @unique @db.VarChar(255)
  passwordHash String   @map("password_hash")
  role         UserRole @default(USER)
  avatar       String?  @db.VarChar(500)
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  lastLoginAt  DateTime? @map("last_login_at")

  // Relations
  ownedProjects    Project[]        @relation("ProjectOwner")
  projectMembers   ProjectMember[]
  assignedTasks    Task[]           @relation("TaskAssignee")
  createdTasks     Task[]           @relation("TaskCreator")
  timeEntries      TimeEntry[]
  comments         Comment[]
  notifications    Notification[]
  createdProjects  Project[]        @relation("ProjectCreator")

  @@map("users")
}

model Project {
  id          String        @id @default(uuid())
  name        String        @db.VarChar(200)
  description String?       @db.Text
  status      ProjectStatus @default(ACTIVE)
  startDate   DateTime?     @map("start_date")
  endDate     DateTime?     @map("end_date")
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  
  // Relations
  ownerId     String        @map("owner_id")
  owner       User          @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  creatorId   String        @map("creator_id")
  creator     User          @relation("ProjectCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  members     ProjectMember[]
  tasks       Task[]
  attachments Attachment[]

  @@map("projects")
}

model ProjectMember {
  id        String   @id @default(uuid())
  role      ProjectRole @default(MEMBER)
  isActive  Boolean  @default(true) @map("is_active")
  joinedAt  DateTime @default(now()) @map("joined_at")
  leftAt    DateTime? @map("left_at")
  
  // Relations
  projectId String  @map("project_id")
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId    String  @map("user_id")
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("project_members")
}

model Task {
  id          String      @id @default(uuid())
  title       String      @db.VarChar(200)
  description String?     @db.Text
  status      TaskStatus  @default(TODO)
  priority    Priority    @default(MEDIUM)
  type        TaskType    @default(TASK)
  storyPoints Int?        @map("story_points")
  dueDate     DateTime?   @map("due_date")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  
  // Relations
  projectId   String      @map("project_id")
  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assigneeId  String?     @map("assignee_id")
  assignee    User?       @relation("TaskAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)
  creatorId   String      @map("creator_id")
  creator     User        @relation("TaskCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  parentTaskId String?    @map("parent_task_id")
  parentTask  Task?       @relation("SubTasks", fields: [parentTaskId], references: [id], onDelete: SetNull)
  subTasks    Task[]      @relation("SubTasks")
  timeEntries TimeEntry[]
  comments    Comment[]
  attachments Attachment[]

  @@map("tasks")
}

model TimeEntry {
  id          String   @id @default(uuid())
  description String?  @db.Text
  startTime   DateTime @map("start_time")
  endTime     DateTime? @map("end_time")
  duration    Int?     // in seconds
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Relations
  taskId      String   @map("task_id")
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  userId      String   @map("user_id")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("time_entries")
}

model Comment {
  id        String   @id @default(uuid())
  content   String   @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // Relations
  taskId    String   @map("task_id")
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Attachment {
  id          String   @id @default(uuid())
  filename    String   @db.VarChar(255)
  originalName String  @map("original_name") @db.VarChar(255)
  mimeType    String   @map("mime_type") @db.VarChar(100)
  size        Int
  url         String   @db.VarChar(500)
  createdAt   DateTime @default(now()) @map("created_at")
  
  // Relations
  projectId   String?  @map("project_id")
  project     Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  taskId      String?  @map("task_id")
  task        Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("attachments")
}

model Notification {
  id        String           @id @default(uuid())
  type      NotificationType
  title     String           @db.VarChar(200)
  message   String           @db.Text
  isRead    Boolean          @default(false) @map("is_read")
  createdAt DateTime         @default(now()) @map("created_at")
  
  // Relations
  userId    String           @map("user_id")
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// Enums
enum UserRole {
  USER
  PROJECT_MANAGER
  ADMIN
}

enum ProjectStatus {
  ACTIVE
  ARCHIVED
  COMPLETED
}

enum ProjectRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskType {
  TASK
  BUG
  STORY
  EPIC
}

enum NotificationType {
  TASK_ASSIGNED
  TASK_UPDATED
  COMMENT_ADDED
  PROJECT_INVITE
  DEADLINE_APPROACHING
  GENERAL
} 